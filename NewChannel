#!/bin/bash
echo "What is the name of this channel?        Please don't use spaces, this name is for this script to identify the channels on this system. It must be the same as the folder you are using on the USB drive."
read chn
exists="$(cat channels | sed 1,2d | grep -w $chn)"
if [ "$exists" == "$chn" ];
then
	echo "It appears that this channel already exists in the system. Please run RemoveChanel to remove it. Please do not name channels from different services the same name in VidUploadServer."
	exit 0
else
	echo "Checked channels, we're good to go."
fi
echo "$chn" >> ~/VidUploadServer/channels
echo -e "What hosting service is this channel on?\nSelect from:\n1 youtube\n2 vimeo\n3 dailymotion"
read serv
if [ "$serv" == "1" ];
then
        echo "Youtube VidUploadServer channel $chn being created."
	cd ~/VidUploadServer/youtube
	cp -r seedchannel $chn
	echo "Grabbing Client_ID and Client_Secret from USB drive '.json' file in the $chn folder."
	if [ ! -f "/media/*/$chn/*.json" ];
	then
		cd ~/VidUploadServer/youtube/
		secret="$(cat /media/*/$chn/client_secret* | grep -o 'secret.*token_uri' | cut -c 10-33)"
		id="$(cat /media/*/$chn/client_secret* | grep -o 'client_id.*auth_provider' | cut -c 13-84)"
		sudo sed -e "3s/ID/$id/" client_secrets_example.json >> temp
		sudo sed -e "4s/SECRET/$secret/" temp >> temp2
		rm temp
		sudo mv temp2 ~/VidUploadServer/youtube/$chn/client_secrets.json
		cd $chn
		sudo chmod 600 client_secrets.json
		echo -e "Right now, the script is pulling the auth link. What is the auth link? A really long url that identifies you and that must be accepted for the Raspberry Pi upload server to be allowed to add files to your youtube channel, however we're on headless raspberry pi. There is no web browser. You have options. It is going to say authorization failed, but we'll still get the link.\nPress Enter"
		python upload_video.py --file=test.mp4 --privacyStatus="private" --noauth_local_webserver >> link
                echo "IGNORE THIS AUTH ERROR"
		echo "IGNORE THIS AUTH ERROR"
		sleep 5s
                echo "IGNORE THIS AUTH ERROR"
		sudo killall -9 python &
		cat link | grep google >> tempor
		mv tempor link
		echo -e "Options:\n1 Print out the link for copy paste into browser and copy paste the verification code into the command prompt from said browser. This works best if you are currently working on the computer you normally upload from and are logged into your youtube/google account in a separate window.\n2 Put the link file into the folder on your thumb drive for transport to the other computer.\n3 Not sure, both."
		read linkt
		if [ "$linkt" == 1 ];
		then
			echo "Great! this is the easiest/fastest way to get this done."
			python upload_video.py --file=test.mp4 --privacyStatus="private" --noauth_local_webserver
		elif [ "$linkt" == 2 ];
		then
			cp link /media/*/$chn/
			echo "Let's say that this task takes you a day. For example, your raspberry pi is a county over from your home computer. Merely, run the GoogAuth script when you have the verification code."
		elif [ "$linkt" == 3 ];
		then
			echo "Let's say that this task takes you a day. For example, your raspberry pi is a county over from your home computer. Merely, run the GoogAuth script when you have the  verification code."
			cp link /media/*/$chn/
			echo "If you want/need, you can ctrl+c out of this prompt"
			python upload_video.py --file=test.mp4 --privacyStatus="private" --noauth_local_webserver
		else
			echo "You didn't pick an option. Doing both."
                        echo " "
                        echo " "
                        echo " "
			echo "Let's say that this task takes you a day. For example, your raspberry pi is a county over from your home computer. Merely, run the GoogAuth script when you have the  verification code."
			echo "The GoogAuth script is located in your channel folder, so you must be in your channel folder to run it."
			cp link /media/*/$chn/link.txt
			python upload_video.py --file=test.mp4 --privacyStatus="private" --noauth_local_webserver
		fi
	else
		echo "Cannot find the 'client_secrets' file in the '$chn' directory on the USB drive. This could be because you named the folder differnently, or because its not plugged in. Exiting the script with a clean slate. Feel free to try again after you've solve the problem."
		sudo rm -r $chn
		exit 0
	fi
elif [ "$serv" == "2" ];
then
	cd ~/VidUploadServer/vimeo/
        echo "vimeo VidUploadServer channel $chn being created."
	mkdir $chn
	cp VMup.py $chn
        echo "This setup works best if you are working over an ssh tunnel and can copy paste in the ID, Key, username, etc."
        echo "However, you may want to put the 'config.py' file together yourself."
        echo " "
        echo -e "Are you:\n\n1 ... Working over ssh, and want to copy/paste in the responses\n       OR\n2 ... Have a config.py file in the $chn folder on your thumb drive\n\nother selections will exit this setup"
        read sshtun
        if [ "$sshtun" == "1" ];
        then
                echo "Paste in the Client Identifier"
                read api_key
                echo "Paste in the Client Secrets"
                read api_secret
		echo "Paste in the Generated Access Token"
		read token
                sudo cat >> ~/VidUploadServer/vimeo/$chn/config.py << EOF
CLIENT_ID = '$api_key'
CLIENT_SECRET = '$api_secret'
TOKEN = '$token'
OAUTH_AUTHORIZE_URL = 'https://api.vimeo.com/oauth/authorize'
OAUTH_TOKEN_URL = 'https://api.vimeo.com/oauth/access_token'
EOF
                sudo chmod 600 ~/VidUploadServer/*/$chn/config.py
        elif [ "$sshtun" == "2" ];
        then
                echo "copying the config.py file from the thumb drive."
                cp /media/*/$chn/config.py ~/VidUploadServer/vimeo/$chn/config.py
                sudo chmod 600 ~/VidUploadServer/*/$chn/config.py
        else
                sudo rm -r ~/VidUploadServer/*/$chn
                cd ~/VidUploadServer
                cat channels | grep -vFx $chn  >> channel
                mv channel channels
                echo "exiting and undoing the channel creation"
                exit 0
        fi
        cd ~/VidUploadServer/vimeo/$chn
        #echo "This next command will test the connection."
        #nosetests
        #sleep 5
        #cd ~
        #mv .dailymotion_sdk_session_default .dailymotion_sdk_session_default.db
        #mv .dailymotion_sdk_session_$usern .dailymotion_sdk_session_$usern.db
        #nosetests -v

elif [ "$serv" == "3" ];
then
	cd ~/VidUploadServer/dailymotion/
	echo "dailymotion VidUploadServer channel $chn being created."
        cp -r dailymotion-sdk-python $chn
        cd $chn
	echo "This setup works best if you are working over an ssh tunnel and can copy paste in the ID, Key, username, etc."
	echo "However, you may want to put the 'config.py' file together yourself."
	echo " "
	echo -e "Are you:\n\n1 ... Working over ssh, and want to copy/paste in the responses\n       OR\n2 ... Have a config.py file in the $chn folder on your thumb drive\n\nother selections will exit this setup."
	read sshtun
	if [ "$sshtun" == "1" ];
	then
		echo "dailymotion username"
		read usern
		echo "dailymotion password"
		read -s pswd
		echo "Paste in the api key"
		read api_key
		echo "Paste in the api secret"
		read api_secret
		sudo cat >> ~/VidUploadServer/dailymotion/$chn/config.py << EOF
CLIENT_ID = '$api_key'
CLIENT_SECRET = '$api_secret'
USERNAME = '$usern'
PASSWORD = '$pswd'
REDIRECT_URI = 'https://api.dailymotion.com/oauth/token'
BASE_URL = 'https://api.dailymotion.com'
OAUTH_AUTHORIZE_URL = 'https://www.dailymotion.com/oauth/authorize'
OAUTH_TOKEN_URL = 'https://api.dailymotion.com/oauth/token'
EOF
		sudo chmod 600 ~/VidUploadServer/*/$chn/config.py
	elif [ "$sshtun" == "2" ];
	then
		echo "copying the config.py file from the thumb drive."
		cp /media/*/$chn/config.py ~/VidUploadServer/dailymotion/$chn/config.py
		sudo chmod 600 ~/VidUploadServer/*/$chn/config.py
	else
		sudo rm -r ~/VidUploadServer/*/$chn
		cd ~/VidUploadServer
		cat channels | grep -vFx $chn  >> channel
		mv channel channels
		echo "exiting and undoing the channel creation"
		exit 0
	fi
        cd ~/VidUploadServer/dailymotion/$chn
	echo "This next command will test the connection."
	nosetests
	sleep 5
	cd ~
	mv .dailymotion_sdk_session_default .dailymotion_sdk_session_default.db
	mv .dailymotion_sdk_session_$usern .dailymotion_sdk_session_$usern.db
	cd ~/VidUploadServer/dailymotion/$chn
	nosetests -v

else
	echo "Not an option, please pick from appropriate options, exiting."
	exit 0
fi
echo "Finished creating upload channel $chn."
